{ inputs, self, nixpkgs }: let
  # Create an attrset, where the attr names are the same as the attr names of the input
  # `nixosConfigurations`, and the attr names are generated by the input `getResultFn`.
  # `getResultFn` takes two arguments, `hostName` and `cfg`, being the machine's hostname and the
  # machine's nix configurations, respectively.
  #
  # Given a `nixosConfigurations` being `{ a = ...; b = ...; cc = ...; }`,
  # and a result being `hostname: cfg: { value-${hostname} = cfg }`,
  # Outputs:
  #   {
  #     a = { value-a = cfg; };
  #     b = { value-b = cfg; };
  #     cc = { value-cc" = cfg; };
  #   }
  mapHosts = nixosConfigurations: getResultFn:
    builtins.mapAttrs
      (hostName: cfg:
        getResultFn hostName cfg
      )
      nixosConfigurations;
in {
  meta = {
    nixpkgs = import nixpkgs {
      config.allowUnfree = true;
      overlays = [
        self.overlays.default
        inputs.nixos-cn.overlay
      ];
    };
    # NOTE: Introduced in zhaofengli/colmena/pull/100, to be included in colmena's 0.4.0 release.
    nodeSpecialArgs = mapHosts
      self.nixosConfigurations
      (_: _:
        { inherit inputs; }
      );
  };

  defaults.deployment = {
    buildOnTarget = true;
    #replaceUnknownProfiles = false;
    allowLocalDeployment = true;
  };
}

// mapHosts
    self.nixosConfigurations
    (hostName: value: {
      nixpkgs.system = value.config.nixpkgs.system;
      imports = value._module.args.modules;
    })
