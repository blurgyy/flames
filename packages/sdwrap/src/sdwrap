# Wrap a command with `systemd-run`[0], the stdout/stderr of the command are redirected into
# systemd's journal, the wrapped process is attached to a transient systemd scope[2] called
# "sdwrap-$command.scope".
#
# This script was originally created to properly handle field codes[1] in a XDG desktop entry.
#
# NOTE: Command run from this script will inherit the caller's environment[0].
#
# Usage:
#   sdwrap <command> [<arguments>..]
#
# E.g.:
#   sdwrap /usr/lib/firefox/firefox https://google.com/
#
# [0]: man:systemd-run(1)
# [1]: https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s07.html
# [2]: man:systemd.scope(5)

command="$1"
shift 1
if [[ "$(id -u)" -ne 0 ]]; then
  user_flag="--user"
fi

unit_name="$(mktemp -u "sdwrap-$(awk -F'/' '{ print $NF }' <<<"$command")-XXX")"

if systemctl $user_flag is-failed "$unit_name.scope" >/dev/null; then
  systemctl $user_flag reset-failed "$unit_name.scope"
fi

if systemctl $user_flag is-active "$unit_name.scope" >/dev/null; then
  systemd-cat "$command" "$@" &
  pid=$(jobs -p)
  if busctl $user_flag call org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager AttachProcessesToUnit ssau "$unit_name.scope" / 1 "$pid"; then
    echo "Attached new process of '$command $*'($pid) to '$unit_name.scope'"
  else
    echo "Failed to attach new process of '$command $*'($pid) to '$unit_name.scope'" >&2
  fi
else
  # NOTE: Must specify `Delegate=yes` as a property for process to attach.
  systemd-run $user_flag \
    --scope --same-dir --unit="$unit_name" --property=Delegate=yes \
    systemd-cat "$command" "$@" &
fi

disown

# vim: ft=sh:
# Author: Blurgy <gy@blurgy.xyz>
# Date:   Mar 22 2022, 11:50 [CST]
